{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuotes.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuotes","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCyD/BC,EArDG,SAACL,GACjB,MAAmCM,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAQE,KAAML,EAAYM,QAAS,SAACC,GAAD,MAAc,0EACjD,cAAC,EAAD,UACA,uBAAMC,QAZiB,WACzBP,GAAc,IAWuBP,UAAWC,IAAQc,KAAMC,SAvBhE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAe9C,UACGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,mBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,mBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAxB,SACE,wBAAQC,QAxBc,WAC5B7B,GAAc,IAuBgCP,UAAU,MAAlD,wC,gBC1BKqC,UAnBG,SAACtC,GACf,MAA8BuC,YAAQC,KAA/BC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,OACdC,EAAUC,cAEhBC,qBAAU,WACQ,cAAXH,GACCC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAMZ,OACI,cAAC,EAAD,CAAWhB,UAAsB,YAAXe,EAAsBlB,WALxB,SAAAuB,GACpBN,EAAYM","file":"static/js/6.e804db48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering]= useState(false);\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  }\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  }\n\n  return (\n    <Fragment>\n      <Prompt when={isEntering} message={(location) => 'Are you sure you want to leave all your entered data will be lost!!!'}/>\n      <Card>\n      <form onFocus={formFocusedHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Autor</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Frase</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={finishEnteringHandler} className='btn'>AÃ±adir Frase</button>\n        </div>\n      </form>\n    </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React, {useEffect} from 'react'; \nimport { useHistory } from 'react-router';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuotes = (props) => {\n    const {sendRequest, status} = useHttp(addQuote);\n    const history = useHistory();\n\n    useEffect(() => {\n        if(status === 'completed') {\n            history.push('/quotes');\n        }\n    }, [status, history]);\n    \n    const addQuoteHandler = quoteData => {\n        sendRequest(quoteData);\n    };\n\n    return(\n        <QuoteForm isLoading={status === 'pending'} onAddQuote = {addQuoteHandler} />\n    );\n};\n\nexport default NewQuotes;"],"sourceRoot":""}